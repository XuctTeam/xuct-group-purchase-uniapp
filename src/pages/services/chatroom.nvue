<template>
  <tm-app>
    <tm-navbar title="我的留言" color="#32CD32" fontColor="#fff" blur></tm-navbar>
    <scroll-view id="chatContainer" scroll-y="true" :scroll-top="scrollTop" :scroll-with-animation="true" :style="{ height: _windowHeight + 'px' }" class="chat">
      <view id="chatContent">
        <uv-chat v-for="(item, i) in messageList" :key="i" :id="`item-${i}`" :me="item.user === userInfo.id" :avatar="item.avatar ?? '/static/images/me.png'" :nick="item.nickName ?? '用户'">
          <template v-slot:content>
            <uv-chat-text :text="item.content"></uv-chat-text>
          </template>
        </uv-chat>
      </view>
    </scroll-view>

    <uv-bottom-bar>
      <view class="flex flex-row flex-row-center-center flex-1">
        <view class="flex flex-1 mr-10">
          <tm-input placeholder="输入您的留言" v-model="chatMsgValue" :maxlength="100" :border="1" color="green"></tm-input>
        </view>
        <tm-button label="发送" size="small" :margin="[0]" color="green" :round="4" :loading="load" :height="60" @click="sendClick"></tm-button>
      </view>
    </uv-bottom-bar>
  </tm-app>
</template>
<script lang="ts" setup>
import tmApp from '@/tmui/components/tm-app/tm-app.vue'
import tmNavbar from '@/tmui/components/tm-navbar/tm-navbar.vue'
import tmInput from '@/tmui/components/tm-input/tm-input.vue'
import tmButton from '@/tmui/components/tm-button/tm-button.vue'
import uvBottomBar from '@/components/uv-bottom-bar/uv-bottom-bar.vue'
import uvChat from '@/components/uv-chat/uv-chat.vue'
import uvChatText from '@/components/uv-chat-text/uv-chat-text.vue'

import { ref, reactive, nextTick, getCurrentInstance } from 'vue'
import { useUserHook, useAppHook } from '@/store'
import { onLoad, onUnload } from '@dcloudio/uni-app'
import { commentList, addComment } from '@/api/user'
import { message } from '@/utils/dialog'
import { computed } from 'vue'

const userStore = useUserHook()
const appStore = useAppHook()
const instance = getCurrentInstance() // 获取组件实例

const messageList = reactive<User.Comment[]>([])
const chatMsgValue = ref<string>('')
const userInfo = userStore.getUserInfo
const load = ref<boolean>(false)
const timerId = ref<any>()
const scrollTop = ref<number>(0)

const _windowHeight = computed(() => {
  const saveBottom = appStore.getSafeBottom()
  return appStore.getWindowHeight() - (saveBottom > 0 ? 90 : 75) - 45
})

//发送消息
const sendClick = () => {
  //如果消息不为空或者不为空白字符（包括换行符、空格等）
  if (!chatMsgValue.value || /^\s+$/.test(chatMsgValue.value)) {
    message({
      title: '不能发送空消息',
      icon: 'error'
    })
    return
  }

  let msg = {
    user: userInfo.id,
    avatar: userInfo.avatar,
    content: chatMsgValue.value,
    nickName: userInfo.nickname
  }
  load.value = true
  addComment(msg)
    .then(() => {
      chatMsgValue.value = ''
      messageList.push(msg)
      nextTick(() => {
        scrollToBottom()
      })
    })
    .catch((err: any) => {
      console.log(err)
    })
    .finally(() => {
      timerId.value = setTimeout(() => {
        load.value = false
      }, 1000)
    })
}

const scrollToBottom = () => {
  let query = uni.createSelectorQuery().in(instance)
  query.select('#chatContainer').boundingClientRect()
  query.select('#chatContent').boundingClientRect()
  query.exec((res) => {
    //如果子元素高度大于父元素高度(显示高度)
    if (res[1].height > res[0].height) {
      //计算出二者差值就是需要滚动的距离
      scrollTop.value = res[1].height - res[0].height
    }
  })
}

onLoad(() => {
  commentList()
    .then((res) => {
      messageList.push(...res.data)
      nextTick(() => {
        scrollToBottom()
      })
    })
    .catch((err: any) => {
      console.log(err)
    })
})

onUnload(() => {
  if (timerId.value > 0) {
    clearTimeout(timerId.value)
  }
})
</script>

<style scoped>
input,
textarea {
  margin: 0;
  padding: 0;
  box-sizing: border-box;
}
.chat {
  display: flex;
  flex-direction: column;
  padding: 20rpx;
  box-sizing: border-box;
  background-color: #f4f5f7;
}
</style>
