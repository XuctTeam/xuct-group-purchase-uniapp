<template>
  <tm-app>
    <z-paging
      ref="paging"
      v-model="messageList"
      safeAreaInsetBottom
      :refresher-enabled="false"
      :loading-more-enabled="false"
      use-chat-record-mode
      autoShowSystemLoading
    >
      <!-- 之后-vue3 -->
      <template #top>
        <tm-navbar title="我的留言" color="#32CD32" fontColor="#fff" blur></tm-navbar>
      </template>
      <view class="chat" :style="{ marginBottom: _totalBarHeight + 'rpx' }">
        <uv-chat
          v-for="(item, i) in messageList"
          :key="i"
          :me="item.user === userInfo.id"
          :avatar="item.avatar ?? '/static/images/me.png'"
          :nick="item.nickName ?? '用户'"
        >
          <template #content>
            <uv-chat-text :text="item.content"></uv-chat-text>
          </template>
        </uv-chat>
      </view>
    </z-paging>
    <view class="button-bottom fixed l-0 b-0 flex" :style="{ height: _totalBarHeight + 'px' }">
      <view class="flex flex-row flex-row-center-center flex-1 pa-10">
        <view class="flex flex-1 mr-10">
          <tm-input placeholder="输入您的留言" v-model="chatMsgValue" :maxlength="100" :border="1" color="green" focusColor="green"></tm-input>
        </view>
        <tm-button label="发送" size="small" :margin="[0]" color="green" :round="4" :loading="load" :height="60" @click="sendClick"></tm-button>
      </view>
    </view>
  </tm-app>
</template>
<script lang="ts" setup>
import tmApp from '@/tmui/components/tm-app/tm-app.vue'
import tmNavbar from '@/tmui/components/tm-navbar/tm-navbar.vue'
import tmInput from '@/tmui/components/tm-input/tm-input.vue'
import tmButton from '@/tmui/components/tm-button/tm-button.vue'
import uvChat from '@/components/uv-chat/uv-chat/uv-chat.vue'
import uvChatText from '@/components/uv-chat/uv-chat-text/uv-chat-text.vue'

import { ref, computed } from 'vue'
import { useUserHook, useAppHook } from '@/store'
import { onLoad, onUnload } from '@dcloudio/uni-app'
import { commentListApi, addCommentApi } from '@/api/modules/user'
import { User } from '@/api/interface/user'

const userStore = useUserHook()
const appStore = useAppHook()

let messageList = ref<User.Comment[]>([])
const chatMsgValue = ref<string>('')
const userInfo = userStore.getUserInfo
const load = ref<boolean>(false)
const timerId = ref<any>()

const paging = ref<any>(null)

const _totalBarHeight = computed(() => {
  const saveBottom = appStore.getSafeBottom()
  if (saveBottom > 0) return 80
  return 65
})

//发送消息
const sendClick = () => {
  //如果消息不为空或者不为空白字符（包括换行符、空格等）
  if (!chatMsgValue.value || /^\s+$/.test(chatMsgValue.value)) {
    uni.$tm.u.toast('不能发送空消息', true, 'error')
    return
  }

  let msg = {
    user: userInfo.id,
    avatar: userInfo.avatar,
    content: chatMsgValue.value,
    nickName: userInfo.nickname
  }
  load.value = true
  addCommentApi(msg)
    .then(() => {
      chatMsgValue.value = ''
      paging.value.addChatRecordData(msg)
    })
    .catch((err: any) => {
      console.log(err)
    })
    .finally(() => {
      timerId.value = setTimeout(() => {
        load.value = false
      }, 1000)
    })
}

onLoad(() => {
  commentListApi()
    .then((res) => {
      paging.value.complete(res.data)
    })
    .catch((err: any) => {
      console.log(err)
      paging.value.complete(false)
    })
})

onUnload(() => {
  if (timerId.value > 0) {
    clearTimeout(timerId.value)
  }
})
</script>

<style scoped>
@import './chatroom.scss';
</style>
