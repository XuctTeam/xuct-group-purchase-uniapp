<!--
 * @Author: Derek Xu
 * @Date: 2023-03-31 09:09:57
 * @LastEditors: Derek Xu
 * @LastEditTime: 2023-04-27 13:02:19
 * @FilePath: \xuct-group-purchase-uniapp\src\pages\cart\index.nvue
 * @Description: 
 * 
 * Copyright (c) 2023 by 楚恬商行, All Rights Reserved. 
-->
<template>
  <tm-app>
    <tm-navbar title="购物车" color="#32CD32" fontColor="#fff" blur hideHome></tm-navbar>
    <view v-if="!logged">
      <tm-result color="green" title="购物车空空如也~" subTitle="登录后查看" btnText="点我登录" @click="goLoginClick"></tm-result>
    </view>
    <view v-else class="content-top">
      <tm-result v-if="cartGoods.length === 0 && !load" color="green" icon="tmicon-shopping-cart-fill" title="空空如也哦~" subTitle="购物车快饿瘪了 T.T" btnText="去购物" @click="toHome"></tm-result>
      <view v-else>
        <view class="top">
          <tm-text :font-size="24" _class="font-weight-b" label="购物车"></tm-text>
          <tm-button transprent text :shadow="0" size="normal" color="green" :label="!editStatus ? '管理' : '完成'" :width="60" @click="changeState" />
        </view>
        <view class="mt-n20">
          <tm-sheet :margin="[10, 10]" :padding="[10, 10]" :shadow="4" :round="2" :height="200" v-for="(item, index) in cartGoods" :key="index">
            <view class="flex flex-row flex-1 flex-row-center-start">
              <view class="checkbox">
                <tm-checkbox :round="10" color="green" @change="(e) => simpleCheckboxChangeState(e, item.goodId)" :value="!!!item.checked"></tm-checkbox>
              </view>
              <view class="flex flex-row flex-1">
                <tm-image :width="180" :round="4" :height="180" :src="item.firstDrawing"></tm-image>
                <view class="flex flex-1 flex-col pa-10 w-0 flex-col-between-center">
                  <tm-text _class="text-overflow-2" :label="item.name"></tm-text>
                  <view class="flex flex-row flex-row-center-between">
                    <tm-text color="orange" :label="`单位：${item.unit}`" />
                    <tm-stepper :max="200" :min="1" :defaultValue="item.num" circular @change="(e) => chooseNumChange(e, item.goodId)"></tm-stepper>
                  </view>
                </view>
              </view>
            </view>
          </tm-sheet>
        </view>
      </view>
    </view>
    <view class="button-bottom actions fixed l-0 b-0" v-if="logged">
      <view class="flex flex-1 flex-row flex-row-center-between pl-20 pr-20">
        <template>
          <view v-if="!editStatus" class="flex flex-row">
            <tm-text _class="font-weight-b" :font-size="24" :label="`已选择${selectedNum}件商品`"></tm-text>
          </view>
          <tm-checkbox v-else :round="10" :size="34" :font-size="24" color="green" label="全选" @change="chooseAllChangeState" v-model="allCheckStatus"></tm-checkbox>
        </template>
        <view class="flex flex-row flex-1 flex-row-center-end mr-10">
          <tm-button v-if="!editStatus" size="small" label="结算" :round="10" color="green" @click="toConfirmOrder"></tm-button>
          <tm-button v-else label="删除" size="small" color="white" :round="10" @click="deleteGood"></tm-button>
        </view>
      </view>
    </view>
  </tm-app>
</template>
<script lang="ts" setup>
import { computed, reactive, ref, watch } from 'vue'
import { onLoad, onShow, onUnload } from '@dcloudio/uni-app'
import tmApp from '@/tmui/components/tm-app/tm-app.vue'
import tmNavbar from '@/tmui/components/tm-navbar/tm-navbar.vue'
import tmResult from '@/tmui/components/tm-result/tm-result.vue'
import tmSheet from '@/tmui/components/tm-sheet/tm-sheet.vue'
import tmCheckbox from '@/tmui/components/tm-checkbox/tm-checkbox.vue'
import tmImage from '@/tmui/components/tm-image/tm-image.vue'
import tmStepper from '@/tmui/components/tm-stepper/tm-stepper.vue'
import tmText from '@/tmui/components/tm-text/tm-text.vue'
import tmButton from '@/tmui/components/tm-button/tm-button.vue'

import { useUserHook } from '@/store'
import { loading, hideLoading, confirm, message } from '@/utils/dialog'
import { cartList, cleanCart, modifyCartNum, deleteCartGood } from '@/api/good'
import { storeToRefs } from 'pinia'

const cartGoods = reactive<Good.CartResult[]>([])
const load = ref<boolean>(true)
const editStatus = ref<boolean>(false)
const allCheckStatus = ref<boolean>(false)
const userStore = useUserHook()
const { logged } = storeToRefs(userStore)
const refreshValue = ref<boolean>(true)

const selectedNum = computed(() => {
  return cartGoods.filter((item) => item.checked).length
})

onShow(() => {
  if (!logged.value) {
    return
  }
  if (!refreshValue.value) {
    refreshValue.value = true
    return
  }
  initData()
})

watch(logged, (newValue, oldValue) => {
  if (!oldValue && newValue) {
    initData()
  }
})

const changeState = () => {
  editStatus.value = !editStatus.value
}

const toHome = () => {
  uni.$tm.u.routerTo('/pages/index/index', 'switchTab')
}

const goLoginClick = () => {
  uni.$tm.u.routerTo('/pages/member/login/index', 'navigate')
}

const simpleCheckboxChangeState = (val: boolean, goodId: string) => {
  const _cartGood = cartGoods.find((x) => x.goodId === goodId)
  if (!_cartGood) {
    return
  }
  _cartGood.checked = val
  //判断选择列表是否满足全选
  if (val) {
    const _allChecked = cartGoods.every((x) => x.checked)
    if (_allChecked) {
      allCheckStatus.value = true
    }
    return
  }
  const _someNoneChecked = cartGoods.some((x) => !!!x.checked)
  if (allCheckStatus.value && _someNoneChecked) {
    allCheckStatus.value = false
  }
}

const chooseAllChangeState = (val: boolean) => {
  cartGoods.forEach((item) => {
    item.checked = val
  })
}

const deleteGood = () => {
  if (selectedNum.value === cartGoods.length) {
    confirm({
      title: '是否清空购物车？',
      success: () => {
        _cleanCart()
      },
      fail: () => {}
    })
    return
  }

  confirm({
    title: '是否删除选择商品？',
    success: () => {
      _deleteCart()
    },
    fail: () => {}
  })
}

const chooseNumChange = (num: number, gid: string) => {
  loading()
  modifyCartNum(gid, num)
    .then(() => {})
    .catch((err: any) => {
      console.log(err)
    })
    .finally(() => {
      hideLoading()
    })
}

const toConfirmOrder = () => {
  if (selectedNum.value === 0) {
    message({
      title: '请选择商品',
      icon: 'error'
    })
    return
  }
  const _ids = cartGoods.filter((x) => x.checked).map((x) => x.goodId)
  uni.navigateTo({
    url: '/pages/order/confirm/index?scene=cart&gids=' + JSON.stringify(_ids),
    events: {
      acceptDataFromDetail(data: any) {
        const { refresh } = data
        refreshValue.value = refresh ?? true
      }
    }
  })
}

const initData = () => {
  loading()
  load.value = true
  cartList()
    .then((res) => {
      allCheckStatus.value = false
      cartGoods.length = 0
      cartGoods.push(...res.data)
    })
    .catch((err: any) => {
      console.log(err)
    })
    .finally(() => {
      load.value = false
      hideLoading()
    })
}

const _cleanCart = () => {
  loading()
  load.value = true
  cleanCart()
    .then(() => {
      cartGoods.length = 0
    })
    .catch((err: any) => {
      console.log(err)
    })
    .finally(() => {
      load.value = false
      hideLoading()
    })
}

const _deleteCart = () => {
  const _delIds = cartGoods.filter((x) => x.checked).map((x) => x.goodId)
  loading()
  load.value = true
  deleteCartGood(_delIds)
    .then(() => {
      cartGoods.length = 0
      initData()
    })
    .catch((err: any) => {
      console.log(err)
    })
    .finally(() => {
      load.value = false
      hideLoading()
    })
}
</script>
<style>
.top {
  position: fixed;
  z-index: 99;
  background-color: #fff;
  left: 0;
  right: 0;
  height: 80rpx;
  display: flex;
  flex-direction: row;
  justify-content: space-between;
  align-items: center;
  padding: 10rpx 30rpx;
}

.checkbox {
  width: 80rpx;
}

.actions {
  height: 120rpx;
}
</style>
