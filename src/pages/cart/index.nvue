<!--
 * @Author: Derek Xu
 * @Date: 2023-03-31 09:09:57
 * @LastEditors: Derek Xu
 * @LastEditTime: 2023-04-10 10:57:56
 * @FilePath: \xuct-group-purchase-uniapp\src\pages\cart\index.nvue
 * @Description: 
 * 
 * Copyright (c) 2023 by 楚恬商行, All Rights Reserved. 
-->
<template>
  <tm-app>
    <tm-navbar title="购物车" color="#70DB93"></tm-navbar>
    <view v-if="!logged">
      <tm-result color="green" subTitle="登录后查看" btnText="去登录"></tm-result>
    </view>
    <view v-else>
      <view v-if="cartGoods.length === 0 && !load">
        <tm-result color="green" subTitle="购物车快饿瘪了 T.T" btnText="去购物" @click="toHome"></tm-result>
      </view>
      <view v-else>
        <view class="top">
          <tm-text :font-size="24" _class="font-weight-b" label="购物车"></tm-text>
          <tm-button transprent text :shadow="0" size="normal" color="green" :label="!editStatus ? '管理' : '完成'" :width="60" @click="changeState" />
        </view>
        <view class="mt-n20" :style="{ paddingBottom: _totalBarHeight + 'rpx' }">
          <tm-sheet :margin="[10, 10]" :padding="[10, 10]" :shadow="4" :round="2" :height="180" v-for="(item, index) in cartGoods" :key="index">
            <tm-row :width="712" :column="16" color="blue-grey" :gutter="2">
              <tm-col :col="2">
                <tm-checkbox :round="10" color="red" @change="e => simpleCheckboxChangeState(e, item.goodId)" :value="!!!item.checked"></tm-checkbox>
              </tm-col>
              <tm-col :col="14" :height="180">
                <view class="flex-1 flex flex-row" :style="{ width: '100%' }">
                  <tm-image :width="180" :round="4" :height="180" :src="item.firstDrawing"></tm-image>
                  <view class="right">
                    <tm-text _class="font-weight-b text-overflow-2" :label="item.name"></tm-text>
                    <view class="flex flex-row flex-row-center-between">
                      <tm-text>123123</tm-text>
                      <tm-stepper :max="200" :min="1" :defaultValue="item.num" circular @change="e => chooseNumChange(e, item.goodId)"></tm-stepper>
                    </view>
                  </view>
                </view>
              </tm-col>
            </tm-row>
          </tm-sheet>
        </view>
      </view>
    </view>
    <view class="button-bottom fixed l-0 b-0" :style="{ height: _totalBarHeight + 'rpx' }" v-if="!!logged">
      <view class="relative flex flex-row flex-around flex-row-center-between pa-10 bottom">
        <view class="ml-20">
          <view v-if="!editStatus" class="flex flex-row">
            <tm-text _class="font-weight-b" :label="`已选择${selectedNum}件商品`"></tm-text>
          </view>
          <tm-checkbox v-else :round="10" color="red" label="全选" @change="chooseAllChangeState" :modelValue="allCheckStatus"></tm-checkbox>
        </view>
        <view class="flex flex-row flex-1 flex-row-center-end">
          <tm-button v-if="!editStatus" label="结算" :round="10" color="green" @click="toConfirmOrder"></tm-button>
          <tm-button v-else label="删除" color="red" :round="10" @click="deleteGood"></tm-button>
        </view>
      </view>
    </view>
  </tm-app>
</template>
<script lang="ts" setup>
import { computed, reactive, ref } from 'vue'
import { onLoad } from '@dcloudio/uni-app'
import tmApp from '@/tmui/components/tm-app/tm-app.vue'
import tmNavbar from '@/tmui/components/tm-navbar/tm-navbar.vue'
import tmResult from '@/tmui/components/tm-result/tm-result.vue'
import tmSheet from '@/tmui/components/tm-sheet/tm-sheet.vue'
import tmCheckbox from '@/tmui/components/tm-checkbox/tm-checkbox.vue'
import tmImage from '@/tmui/components/tm-image/tm-image.vue'
import tmStepper from '@/tmui/components/tm-stepper/tm-stepper.vue'
import tmRow from '@/tmui/components/tm-row/tm-row.vue'
import tmCol from '@/tmui/components/tm-col/tm-col.vue'
import tmText from '@/tmui/components/tm-text/tm-text.vue'
import tmButton from '@/tmui/components/tm-button/tm-button.vue'

import { useUserHook, useAppHook } from '@/store'
import { loading, hideLoading, confirm, message } from '@/utils/dialog'
import { cartList, cleanCart, modifyCartNum, deleteCartGood } from '@/api/good'

const cartGoods = reactive<Good.CartResult[]>([])
const load = ref<boolean>(true)
const editStatus = ref<boolean>(false)
const allCheckStatus = ref<boolean>(false)
const store = useUserHook()
const appStore = useAppHook()
const logged = store.logged

const _totalBarHeight = computed(() => {
  if (!logged) {
    return appStore.getSafeBottom()
  }
  const safeBottom = appStore.getSafeBottom()
  return uni.$tm.u.torpx(safeBottom > 0 ? 80 : 60 + safeBottom)
})

const selectedNum = computed(() => {
  return cartGoods.filter(item => item.checked).length
})

onLoad(() => {
  if (!logged) {
    return
  }
  _load()
})

const changeState = () => {
  editStatus.value = !editStatus.value
}

const toHome = () => {
  uni.$tm.u.routerTo('/pages/index/index', 'redirect')
}

const simpleCheckboxChangeState = (val: boolean, goodId: string) => {
  const _cartGood = cartGoods.find(x => x.goodId === goodId)
  if (!_cartGood) {
    return
  }
  _cartGood.checked = val
  //判断选择列表是否满足全选
  if (val) {
    const _allChecked = cartGoods.every(x => x.checked)
    if (_allChecked) {
      allCheckStatus.value = true
    }
    return
  }
  const _someNoneChecked = cartGoods.some(x => !!!x.checked)
  if (allCheckStatus.value && _someNoneChecked) {
    allCheckStatus.value = false
  }
}

const chooseAllChangeState = (val: boolean) => {
  cartGoods.forEach(item => {
    item.checked = val
  })
}

const deleteGood = () => {
  if (selectedNum.value === cartGoods.length) {
    confirm({
      title: '是否清空购物车？',
      success: () => {
        _cleanCart()
      },
      fail: () => {}
    })
    return
  }

  confirm({
    title: '是否删除选择商品？',
    success: () => {
      _deleteCart()
    },
    fail: () => {}
  })
}

const chooseNumChange = (num: number, gid: string) => {
  loading()
  modifyCartNum(gid, num)
    .then(() => {
      hideLoading()
    })
    .catch((err: any) => {
      console.log(err)
      hideLoading()
    })
}

const toConfirmOrder = () => {
  if (selectedNum.value === 0) {
    message({
      title: '请选择商品',
      icon: 'error'
    })
    return
  }
  const _ids = cartGoods.filter(x => x.checked).map(x => x.goodId)
  uni.navigateTo({
    url: '/pages/order/confirm/index?gids=' + JSON.stringify(_ids),
    success: () => {
      uni.$once('cart::order::success', data => {})
    },
    fail: () => {}
  })
}

const _load = () => {
  loading()
  cartList()
    .then(res => {
      const item = res.data
      cartGoods.push(...item)
      hideLoading()
      load.value = false
    })
    .catch((err: any) => {
      console.log(err)
      hideLoading()
      load.value = false
    })
}

const _cleanCart = () => {
  loading()
  cleanCart()
    .then(() => {
      cartGoods.length = 0
      hideLoading()
    })
    .catch((err: any) => {
      console.log(err)
      hideLoading()
    })
}

const _deleteCart = () => {
  const _delIds = cartGoods.filter(x => x.checked).map(x => x.goodId)
  loading()
  deleteCartGood(_delIds)
    .then(() => {
      cartGoods.length = 0
      load.value = true
      _load()
    })
    .catch((err: any) => {
      hideLoading()
    })
}
</script>
<style>
.top {
  position: fixed;
  z-index: 99;
  background-color: #fff;
  left: 0;
  right: 0;
  height: 80rpx;
  display: flex;
  flex-direction: row;
  justify-content: space-between;
  align-items: center;
  padding: 10rpx 30rpx;
}

.right {
  display: flex;
  flex-direction: column;
  justify-content: space-between;
  margin-left: 10rpx;
  flex: 1;
  width: 0;
}
</style>
