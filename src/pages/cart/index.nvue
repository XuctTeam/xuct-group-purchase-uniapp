<!--
 * @Author: Derek Xu
 * @Date: 2023-03-31 09:09:57
 * @LastEditors: Derek Xu
 * @LastEditTime: 2023-06-09 09:25:59
 * @FilePath: \xuct-group-purchase-uniapp\src\pages\cart\index.nvue
 * @Description: 
 * 
 * Copyright (c) 2023 by 楚恬商行, All Rights Reserved. 
-->
<template>
  <tm-app>
    <tm-navbar title="购物车" color="#32CD32" fontColor="#fff" blur hideHome></tm-navbar>
    <view v-if="!logged">
      <tm-result color="green" title="购物车空空如也~" subTitle="登录后查看" btnText="点我登录" @click="goLoginClick"></tm-result>
    </view>
    <view v-else class="content-top">
      <tm-result
        v-if="cartWares.length === 0 && !load"
        color="green"
        icon="tmicon-shopping-cart-fill"
        title="~空空如也哦~"
        subTitle="购物车快饿瘪了 T.T"
        btnText="去购物"
        @click="toHome"
      ></tm-result>
      <view v-else>
        <view class="top">
          <tm-text :font-size="24" _class="font-weight-b" label="购物车"></tm-text>
          <tm-button transprent text :shadow="0" size="normal" color="green" :label="!editStatus ? '管理' : '完成'" :width="60" @click="changeState" />
        </view>
        <view class="mt-n20">
          <tm-sheet :margin="[10, 10]" :padding="[10, 10]" :shadow="4" :round="2" :height="200" v-for="(item, index) in cartWares" :key="index">
            <view class="flex flex-row flex-1 flex-row-center-start">
              <view class="checkbox">
                <tm-checkbox :round="10" color="green" @change="(e) => simpleCheckboxChangeState(e, item.waresId)" :value="!!!item.checked"></tm-checkbox>
              </view>
              <view class="flex flex-row flex-1">
                <tm-image :width="180" :round="4" :height="180" :src="item.firstDrawing" @click="toWaresDetail(item.waresId)" />
                <view class="flex flex-1 flex-col pa-10 w-0 flex-col-between-center">
                  <tm-text _class="text-overflow-2" :label="item.name"></tm-text>
                  <view class="flex flex-row flex-row-center-between">
                    <tm-text color="orange" :label="`单位：${item.unit}`" />
                    <!-- <tm-stepper :max="200" :min="1" :defaultValue="item.num" circular @change="(e) => chooseNumChange(e, item.waresId)"></tm-stepper> -->
                    <uv-ui-input-number :max="200" :min="1" v-model="item.num" @change="(e) => chooseNumChange(e, item.waresId)"></uv-ui-input-number>
                  </view>
                </view>
              </view>
            </view>
          </tm-sheet>
        </view>
      </view>
    </view>

    <view class="button-bottom actions fixed l-0 b-0" v-if="logged && cartWares.length !== 0">
      <view class="flex flex-1 flex-row flex-row-center-between pl-20 pr-20">
        <template>
          <view v-if="!editStatus" class="flex flex-row">
            <tm-text _class="font-weight-b" :font-size="24" :label="`已选择${selectedNum}件商品`"></tm-text>
          </view>
          <tm-checkbox
            v-else
            :round="10"
            :size="34"
            :font-size="24"
            color="green"
            label="全选"
            @change="chooseAllChangeState"
            v-model="allCheckStatus"
          ></tm-checkbox>
        </template>
        <view class="flex flex-row flex-1 flex-row-center-end mr-10">
          <tm-button v-if="!editStatus" size="small" label="结算" :round="4" color="green" @click="toConfirmOrder"></tm-button>
          <tm-button v-else label="删除" size="small" color="white" :round="4" @click="deleteWares"></tm-button>
        </view>
      </view>
    </view>
  </tm-app>
</template>
<script lang="ts" setup>
import { computed, reactive, ref, watch } from 'vue'
import { onShow } from '@dcloudio/uni-app'
import tmApp from '@/tmui/components/tm-app/tm-app.vue'
import tmNavbar from '@/tmui/components/tm-navbar/tm-navbar.vue'
import tmResult from '@/tmui/components/tm-result/tm-result.vue'
import tmSheet from '@/tmui/components/tm-sheet/tm-sheet.vue'
import tmCheckbox from '@/tmui/components/tm-checkbox/tm-checkbox.vue'
import tmImage from '@/tmui/components/tm-image/tm-image.vue'
import tmText from '@/tmui/components/tm-text/tm-text.vue'
import tmButton from '@/tmui/components/tm-button/tm-button.vue'
import uvUiInputNumber from '@/components/uv-ui/uv-ui-input-number/index.vue'

import { useUserHook } from '@/store'
import { confirm } from '@/utils/dialog'
import { cartListApi, cleanCartApi, modifyCartNumApi, deleteCartWaresApi } from '@/api/modules/wares'
import { Wares } from '@/api/interface'
import { storeToRefs } from 'pinia'

const cartWares = reactive<Wares.Cart[]>([])
const load = ref<boolean>(true)
const editStatus = ref<boolean>(false)
const allCheckStatus = ref<boolean>(false)
const userStore = useUserHook()
const { logged } = storeToRefs(userStore)
const refreshValue = ref<boolean>(true)

const selectedNum = computed(() => {
  return cartWares.filter((item) => item.checked).length
})

onShow(() => {
  if (!logged.value) {
    return
  }
  if (!refreshValue.value) {
    refreshValue.value = true
    return
  }
  initData()
})

watch(logged, (newValue, oldValue) => {
  if (!oldValue && newValue) {
    initData()
  }
})

const changeState = () => {
  editStatus.value = !editStatus.value
}

const toHome = () => {
  uni.$tm.u.routerTo('/pages/index/index', 'switchTab')
}

const goLoginClick = () => {
  uni.$tm.u.routerTo('/pages/member/login/index', 'navigate')
}

const simpleCheckboxChangeState = (val: boolean, waresId: string) => {
  const _cartWares = cartWares.find((x) => x.waresId === waresId)
  if (!_cartWares) {
    return
  }
  _cartWares.checked = val
  //判断选择列表是否满足全选
  if (val) {
    const _allChecked = cartWares.every((x) => x.checked)
    if (_allChecked) {
      allCheckStatus.value = true
    }
    return
  }
  const _someNoneChecked = cartWares.some((x) => !x.checked)
  if (allCheckStatus.value && _someNoneChecked) {
    allCheckStatus.value = false
  }
}

const chooseAllChangeState = (val: boolean) => {
  cartWares.forEach((item) => {
    item.checked = val
  })
}

const deleteWares = () => {
  if (selectedNum.value === cartWares.length) {
    confirm({
      title: '是否清空购物车？',
      success: () => {
        _cleanCartApi()
      },
      fail: () => {}
    })
    return
  }

  confirm({
    title: '是否删除选择商品？',
    success: () => {
      _deleteCart()
    },
    fail: () => {}
  })
}

const chooseNumChange = (num: number, waresId: string) => {
  modifyCartNumApi(waresId, num)
    .then(() => {})
    .catch((err: any) => {
      console.log(err)
    })
}

const toWaresDetail = (id: string) => {
  uni.$tm.u.routerTo('/pages/wares/index?id=' + id, 'navigate')
}

const toConfirmOrder = () => {
  if (selectedNum.value === 0) {
    uni.$tm.u.toast('请选择商品', true, 'error')
    return
  }
  const _ids = cartWares.filter((x) => x.checked).map((x) => x.waresId)
  uni.navigateTo({
    url: '/pages/order/confirm/index?scene=cart&wareIds=' + JSON.stringify(_ids),
    events: {
      acceptDataFromDetail(data: any) {
        const { refresh } = data
        refreshValue.value = refresh ?? true
      }
    }
  })
}

const initData = () => {
  load.value = true
  cartListApi()
    .then((res) => {
      allCheckStatus.value = false
      cartWares.length = 0
      cartWares.push(...res.data)
    })
    .catch((err: any) => {
      console.log(err)
    })
    .finally(() => {
      load.value = false
    })
}

const _cleanCartApi = () => {
  load.value = true
  cleanCartApi()
    .then(() => {
      cartWares.length = 0
    })
    .catch((err: any) => {
      console.log(err)
    })
    .finally(() => {
      load.value = false
    })
}

const _deleteCart = () => {
  const _delIds = cartWares.filter((x) => x.checked).map((x) => x.waresId)
  load.value = true
  deleteCartWaresApi(_delIds)
    .then(() => {
      cartWares.length = 0
      initData()
    })
    .catch((err: any) => {
      console.log(err)
    })
    .finally(() => {
      load.value = false
    })
}
</script>
<style scoped>
@import './index.scss';
</style>
