<!--
 * @Author: Derek Xu
 * @Date: 2023-03-17 13:42:03
 * @LastEditors: Derek Xu
 * @LastEditTime: 2023-06-09 09:28:10
 * @FilePath: \xuct-group-purchase-uniapp\src\pages\member\login\index.nvue
 * @Description: 
 * 
 * Copyright (c) 2023 by 楚恬商行, All Rights Reserved. 
-->
<template>
  <tm-app>
    <tm-navbar title="登录" color="#32CD32" fontColor="#fff" :shadow="0"></tm-navbar>
    <view class="login-m">
      <view class="login-item">
        <view class="logo">
          <open-data type="userAvatarUrl"></open-data>
        </view>
      </view>
      <view class="login-tip">
        <view class="login-tip-big">为提供优质服务，团到家需要您的以下信息</view>
        <view class="login-tip-small">你的公开信息 （昵称、头像等）</view>
      </view>
    </view>
    <view class="login-b flc">
      <tm-button :round="6" color="white" label="拒绝" @click="reject"></tm-button>
      <tm-button :round="6" color="green" font-color="white" label="允许" @click="login"></tm-button>
    </view>
    <view class="button-bottom fixed l-0 b-0" :style="{ height: _totalBarHeight + 'rpx' }">
      <view class="relative flex flex-row flex-around flex-row-center-center pa-10 bottom">
        <!-- 请注意我这里使用了标准的写法v-slot:default="{checked}" -->
        <!-- 如果组件没有插槽数据,变成v-slot:default -->
        <!-- 那怕你不使用数据,也要这么写.如果不写template v-slot:default="{checked}"> 将会产生兼容性,已知微信小程序会丢失插槽内容 -->
        <tm-checkbox :round="25" :size="36" color="green" @change="checkChange">
          <!-- <template #default="{ checked }"> -->
          <template>
            <view class="flex flex-row">
              <tm-text color="grey" label="我已经阅读并同意"></tm-text>
              <view>
                <tm-text color="success" label="《隐私协议》" @click.stop="toPrivacyAgreement"></tm-text>
              </view>
              <tm-text color="grey" label="和"></tm-text>
              <view>
                <tm-text color="success" label="《用户协议》" @click.stop="toUserProtocol"></tm-text>
              </view>
            </view>
          </template>
        </tm-checkbox>
      </view>
    </view>
  </tm-app>
</template>
<script lang="ts" setup>
import tmApp from '@/tmui/components/tm-app/tm-app.vue'
import tmNavbar from '@/tmui/components/tm-navbar/tm-navbar.vue'
import tmButton from '@/tmui/components/tm-button/tm-button.vue'
import tmCheckbox from '@/tmui/components/tm-checkbox/tm-checkbox.vue'
import tmText from '@/tmui/components/tm-text/tm-text.vue'
import { computed, ref } from 'vue'
import { loginByCode } from '@/api/modules/login'
import { useAppHook, useUserHook } from '@/store'
import { confirm, loading, hideLoading } from '@/utils/dialog'

const checked = ref<boolean>(false)

const userStore = useUserHook()
const appStore = useAppHook()

const _totalBarHeight = computed(() => {
  const safeBottom = appStore.getSafeBottom()
  return uni.$tm.u.torpx(safeBottom > 0 ? 80 : 60 + safeBottom)
})

const checkChange = (e: any) => {
  checked.value = e
}

const login = () => {
  if (!checked.value) {
    uni.$tm.u.toast('请勾选协议', true, 'error')
    return
  }
  _login()
    .then((res: any) => {
      const { tokenValue, ...member } = res
      userStore.setToken(tokenValue)
      userStore.setUserInfo(member)
      back()
    })
    .catch((err: any) => {
      console.log(err)
    })
}

const back = () => {
  const pageLength = getCurrentPages().length
  uni.$tm.u.routerTo(pageLength === 1 ? '/pages/index/index' : '', pageLength === 1 ? 'redirect' : 'navigateBack')
}

const reject = () => {
  confirm({
    title: '拒绝后将无法进行登录！',
    success: () => {
      back()
    },
    fail: (msg: any) => {
      console.log(msg)
    }
  })
}

const _login = () => {
  return new Promise((resolve, reject) => {
    uni.login({
      provider: 'weixin', //使用微信登录
      success: async (loginRes) => {
        loading('登录中...')
        try {
          const loinResult = await loginByCode(loginRes.code)
          const { tokenValue, member } = loinResult.data
          hideLoading()
          return resolve({
            tokenValue,
            ...member
          })
        } catch (err) {
          console.log(err)
          hideLoading()
          return reject(err)
        }
      },
      fail(result: any) {
        hideLoading()
        return reject(result)
      }
    })
  })
}

const toPrivacyAgreement = () => {
  uni.$tm.u.routerTo('/pages/public/privacyAgreement', 'navigate')
}

const toUserProtocol = () => {
  uni.$tm.u.routerTo('/pages/public/userProtocol', 'navigate')
}
</script>
<style scoped>
@import './index.scss';
</style>
