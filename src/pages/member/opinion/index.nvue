<template>
  <tm-app>
    <tm-navbar title="意见反馈" color="#32CD32" fontColor="#fff" blur></tm-navbar>
    <uv-bottom-bar-page>
      <tm-sheet :round="3" :shadow="2" :margin="[10]" :padding="[20]">
        <view class="pa-10">
          <tm-text _class="font-weight-b" :fontSize="28" label="描述问题"></tm-text>
        </view>
        <tm-divider></tm-divider>
        <tm-radio-group model="button" v-model="opinionValue">
          <tm-radio color="green" v-for="(item, index) in radioItems" :value="item.key" :label="item.label" :key="index" />
        </tm-radio-group>
      </tm-sheet>

      <tm-sheet :round="3" :shadow="2" :margin="[10]" :padding="[20]">
        <tm-text _class="font-weight-b" :fontSize="28" label="凭证（支持3张照片）"></tm-text>
        <tm-divider></tm-divider>
        <tm-upload
          showSort
          :onStart="onStart"
          color="green"
          v-model="imageList"
          :header="uploadHeader"
          ref="up"
          :width="636"
          :rows="3"
          :maxFile="3"
          :url="uploadUrlValue"
          @fail="onUploadFail"
        >
        </tm-upload>
      </tm-sheet>

      <tm-sheet :round="3" :shadow="2" :margin="[10]" :padding="[20]">
        <view class="pa-10 flex flex-row flex-row-center-between">
          <tm-text _class="font-weight-b" :fontSize="28" label="描述"></tm-text>
        </view>
        <tm-divider></tm-divider>
        <tm-input
          v-model="refundReasonValue"
          :inputPadding="[12]"
          :height="200"
          placeholder="填写描述"
          confirm-hold
          showCharNumber
          :maxlength="100"
          focusColor="green"
          :border="1"
          type="textarea"
        ></tm-input>
      </tm-sheet>
      <template #footer>
        <view class="flex-1">
          <tm-button label="提交" :round="4" color="green" block @click="onSave"></tm-button>
        </view>
      </template>
    </uv-bottom-bar-page>
  </tm-app>
</template>
<script lang="ts" setup>
import { ref, getCurrentInstance } from 'vue'
import tmApp from '@/tmui/components/tm-app/tm-app.vue'
import tmNavbar from '@/tmui/components/tm-navbar/tm-navbar.vue'
import tmSheet from '@/tmui/components/tm-sheet/tm-sheet.vue'
import tmText from '@/tmui/components/tm-text/tm-text.vue'
import tmDivider from '@/tmui/components/tm-divider/tm-divider.vue'
import tmRadio from '@/tmui/components/tm-radio/tm-radio.vue'
import tmRadioGroup from '@/tmui/components/tm-radio-group/tm-radio-group.vue'
import tmUpload from '@/tmui/components/tm-upload/tm-upload.vue'
import tmInput from '@/tmui/components/tm-input/tm-input.vue'
import tmButton from '@/tmui/components/tm-button/tm-button.vue'
import uvBottomBarPage from '@/components/uv-bottom-bar-page/uv-bottom-bar-page.vue'

import ENV_CONFIG from '@/config/env'
import { useUserHook } from '@/store'

const userStore = useUserHook()
const $instance = ref<any>(getCurrentInstance()?.proxy)
const { BASE_API_URL } = ENV_CONFIG
const uploadUrlValue = ref<string>(BASE_API_URL + '/api/v1/opinion/upload')
const imageList = ref([])
const opinionValue = ref('1')
const refundReasonValue = ref<string>('')
import { hideLoading, loading } from '@/utils/dialog'
import { saveOpinion } from '@/api/modules/user'

const radioItems = [
  {
    key: '1',
    label: '质量问题'
  },
  {
    key: '2',
    label: '送货问题'
  },
  {
    key: '3',
    label: '售后问题'
  },
  {
    key: '4',
    label: '账号问题'
  },
  {
    key: '5',
    label: '系统问题'
  },
  {
    key: '6',
    label: '意见反馈'
  }
]

const uploadHeader = {
  satoken: 'Bearer ' + userStore.getToken
}

const onStart = (item: any) => {
  console.log(item)
  return true
}

const onUploadFail = () => {}

const onSave = () => {
  loading()
  const _images = imageList.value
    .filter((x: any) => {
      return JSON.parse(x.response).code === 200
    })
    .map((x: any) => {
      return JSON.parse(x.response).data
    })

  saveOpinion({
    type: opinionValue.value,
    images: _images.join(','),
    status: 1,
    remarks: refundReasonValue.value,
    createTime: new Date()
  })
    .then(() => {
      setPageRefresh()
    })
    .catch((err: any) => {
      console.log(err)
    })
    .finally(() => {
      hideLoading()
    })
}

const setPageRefresh = () => {
  let pages = getCurrentPages() // 当前页
  let beforePage = pages[pages.length - 2] // 上个页面
  const channel = $instance.value?.getOpenerEventChannel()
  if (beforePage !== undefined && beforePage.route === 'pages/member/opinion/list') {
    channel.emit('acceptDataFromDetail', {
      refresh: true
    })
  }
  uni.$tm.u.routerTo('', 'navigateBack')
}
</script>
