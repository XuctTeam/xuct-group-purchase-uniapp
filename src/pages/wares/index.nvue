<!--
 * @Author: Derek Xu
 * @Date: 2023-03-28 16:23:38
 * @LastEditors: Derek Xu
 * @LastEditTime: 2023-06-07 17:52:46
 * @FilePath: \xuct-group-purchase-uniapp\src\pages\wares\index.nvue
 * @Description: 
 * 
 * Copyright (c) 2023 by 楚恬商行, All Rights Reserved. 
-->
<template>
  <tm-app>
    <tm-navbar title="商品详情" color="#32CD32" fontColor="#fff" blur></tm-navbar>
    <uv-bottom-bar-container :show-footer="!!logged">
      <tm-carousel autoplay :margin="[0, 0]" :height="700" :displayMultipleItems="0" :list="swiperImages" />
      <tm-sheet :margin="[10, 10, 10, 10]" :round="4" :shadow="4">
        <view class="title text-overflow-2 mb-20">{{ name }}</view>
        <view class="blurb text-overflow-2 mb-20"> {{ blurbValue }}</view>
        <view class="flex flex-row flex-row-center-between mt-20">
          <view class="flex flex-row">
            <tm-text color="grey" :font-size="24" label="库存:" />
            <view class="ml-8">
              <tm-text color="orange" :font-size="24" :label="inventoryValue" />
            </view>
          </view>
          <view class="flex flex-row">
            <tm-text color="grey" :font-size="24" label="热度:"></tm-text>
            <view class="ml-8">
              <tm-text color="orange" :font-size="24" :label="browse" />
            </view>
          </view>
          <view class="flex flex-row">
            <tm-text color="grey" :font-size="24" label="成交量:"></tm-text>
            <view class="ml-8">
              <tm-text color="orange" :font-size="24" :label="sell" />
            </view>
          </view>
        </view>
      </tm-sheet>
      <tm-sticky :offset="offset">
        <template #sticky>
          <tm-sheet :margin="[0, 0]" :padding="[0, 0]">
            <tm-tabs
              :list="tabsTitle"
              :width="_width"
              v-model:active-name="tabActiveRef"
              @change="switchTab"
              showTabsLineAni
              :item-width="_width / 3 - 40"
              align="around"
              tabsLineAniColor="green"
              activeFontColor="green"
            ></tm-tabs>
          </tm-sheet>
        </template>
        <view class="wrap">
          <tm-sheet :margin="[10]" :padding="[0]" id="1" class="item wrap-top-list1">
            <view class="flex flex-row flex-row-center-start pt-20">
              <tm-divider color="green" :border="10" real-color vertical :height="30"></tm-divider>
              <view class="font-weight-b">评价</view>
            </view>
            <tm-divider></tm-divider>
            <view>121111</view>
            <view>121111</view>
            <view>121111</view>
            <view>121111</view>
            <view>121111</view>
            <view>121111</view>
            <view>121111</view>
            <view>121111</view>
            <view>121111</view>
            <view>121111</view>
            <view>121111</view>
            <view>121111</view>
            <view>121111</view>
          </tm-sheet>
          <tm-sheet :margin="[10]" :padding="[0]" id="2" class="item wrap-top-list2">
            <view class="flex flex-row flex-row-center-start pt-20">
              <tm-divider color="green" :border="10" real-color vertical :height="30"></tm-divider>
              <view class="font-weight-b">商品详情</view>
            </view>
            <tm-divider></tm-divider>
            <tm-html :content="detail" />
          </tm-sheet>
        </view>
      </tm-sticky>
      <template #footer>
        <view class="flex flex-row flex-1 flex-row-center-between">
          <tm-row :column="3" :width="300">
            <tm-col @click="toServices" :height="100">
              <tm-icon name=" tmicon-aliwangwang" :fontSize="36" />
              <tm-text color="grey" :font-size="24" label="客服" />
            </tm-col>
            <tm-col @click="toCart" :height="100">
              <tm-icon name="tmicon-shoppingcart" :fontSize="36" />
              <tm-text color="grey" :font-size="24" label="购物车" />
            </tm-col>
            <tm-col :height="100">
              <tm-icon name="tmicon-md-heart-empty" :fontSize="36" @click="onCollects" v-if="!userCollect" />
              <tm-icon name="tmicon-md-heart" color="red" :fontSize="36" @click="onCollects" v-else />
              <tm-text color="grey" :font-size="24" label="收藏" />
            </tm-col>
          </tm-row>
          <view class="flex flex-row flex-1 flex-row-center-end">
            <tm-button color="orange" _class="round-l-24 round-r-0" :round="5" label="加入购物车" :loading="addLoading" @click="onAddCart"></tm-button>
            <tm-button color="green" _class="round-r-24 round-l-0" label="立即下单" @click="onFastConfirm"></tm-button>
          </view>
        </view>
      </template>
    </uv-bottom-bar-container>
    <tm-float-button
      position="br"
      v-if="scrollTop > 400"
      :btn="{ icon: 'tmicon-angle-up', linear: '', color: 'green', label: '置顶' }"
      :offset="[40, 200]"
      @click="goToTop"
    ></tm-float-button>
  </tm-app>
</template>

<script lang="ts" setup>
import { reactive, ref, nextTick, getCurrentInstance, computed } from 'vue'
import tmApp from '@/tmui/components/tm-app/tm-app.vue'
import tmNavbar from '@/tmui/components/tm-navbar/tm-navbar.vue'
import tmCarousel from '@/tmui/components/tm-carousel/tm-carousel.vue'
import tmHtml from '@/tmui/components/tm-html/tm-html.vue'
import tmSheet from '@/tmui/components/tm-sheet/tm-sheet.vue'
import tmText from '@/tmui/components/tm-text/tm-text.vue'
import tmButton from '@/tmui/components/tm-button/tm-button.vue'
import tmTabs from '@/tmui/components/tm-tabs/tm-tabs.vue'
import tmIcon from '@/tmui/components/tm-icon/tm-icon.vue'
import tmSticky from '@/tmui/components/tm-sticky/tm-sticky.vue'
import tmDivider from '@/tmui/components/tm-divider/tm-divider.vue'
import tmFloatButton from '@/tmui/components/tm-float-button/tm-float-button.vue'
import uvBottomBarContainer from '@/components/uv-bottom-bar-container/uv-bottom-bar-container.vue'
import tmRow from '@/tmui/components/tm-row/tm-row.vue'
import tmCol from '@/tmui/components/tm-col/tm-col.vue'
import { onLoad, onPageScroll } from '@dcloudio/uni-app'
import { useUserHook, useAppHook } from '@/store'
import { Wares } from '@/api/interface'

import { getWares, collect, addCart, browseWares } from '@/api/modules/wares'
const store = useUserHook()
const appStore = useAppHook()
const $instance = ref<any>(getCurrentInstance()?.proxy)
const idValue = ref<string>('')
const detail = ref<string>('')
const name = ref<string>('')
const browse = ref<number>(1)
const sell = ref<number>(0)
const offset = ref(uni.$tm.u.torpx(appStore.getCustomBarHeight()))
const swiperImages: string[] = reactive([])
const inventoryValue = ref<number>(0)
const userCollect = ref<boolean>(false)
const addLoading = ref<boolean>(false)
const blurbValue = ref<string>('')
const tabActiveRef = ref<string>('1')
const isScrollByTab = ref<boolean>(false)
const scrollTop = ref<number>(0)

const tabsTitle = ref([
  { key: '0', title: '商品' },
  { key: '1', title: '评价' },
  { key: '2', title: '详情' }
])
const _width = computed(() => {
  return uni.$tm.u.torpx(appStore.getWindowWidth())
})

const logged = store.logged

onLoad((opts: any) => {
  const { id } = opts
  if (!id) {
    return
  }
  idValue.value = id
  _loadWares()
  nextTick(() => {
    _browseWares()
  })
})

onPageScroll((res: any) => {
  scrollTop.value = res.scrollTop
  if (isScrollByTab.value) {
    return
  }
  if (scrollTop.value < 200) {
    tabActiveRef.value = '0'
    return
  }
  uni
    .createSelectorQuery()
    .selectAll('.item')
    .boundingClientRect((rects: any) => {
      for (let i = rects.length - 1; i >= 0; i--) {
        const rect: any = rects[i]
        //实时获取多个模块距离的距离，使用findLastIndex找到当前的tab
        if (rect.top < offset.value - 10) {
          const activeRect: any = rects[i]
          if (tabActiveRef.value === activeRect.id) {
            return
          }
          tabActiveRef.value = activeRect.id
          return
        }
      }
    })
    .exec()
})
const switchTab = (key: string | number) => {
  const strKey = key + ''
  isScrollByTab.value = true
  if (strKey === '0') {
    goToTop()
    return
  }
  gotoView('.wrap-top-list' + key)
}

const goToTop = () => {
  tabActiveRef.value = '0'
  nextTick(() => {
    uni.pageScrollTo({
      //页面需要滚动的距离为相对于视口的距离加上当前页面的滚动距离
      scrollTop: 0,
      duration: 300
    })
    //这里在滚动完成之后将isScrollByTab重置为false，故意在大于300ms之后
    const timer = setTimeout(() => {
      isScrollByTab.value = false
      clearTimeout(timer)
    }, 500)
  })
}

// 跳转锚点
const gotoView = async (name: string) => {
  const rect: any = await _getRect(name)
  //目标位置的节点：类class或者id
  nextTick(async () => {
    const wrapDomRes: any = await _getRect('.wrap')
    //最外层盒子的节点：类class或者id
    uni.pageScrollTo({
      duration: 100, //过渡时间
      //scrollTop: data.top + 460 - res.top //到达距离顶部的top值
      scrollTop: rect.top + 500 - wrapDomRes.top //如果置顶
    })
    //这里在滚动完成之后将isScrollByTab重置为false，故意在大于300ms之后
    const timer = setTimeout(() => {
      isScrollByTab.value = false
      clearTimeout(timer)
    }, 500)
  })
}

const onCollects = () => {
  collect(idValue.value)
    .then(() => {
      userCollect.value = !userCollect.value
      setPageRefresh()
    })
    .catch((err) => {
      console.log(err)
    })
}

const onAddCart = () => {
  addLoading.value = true
  addCart(idValue.value)
    .then(() => {
      addLoading.value = false
    })
    .catch((err: any) => {
      console.log(err)
      addLoading.value = false
    })
}

const _loadWares = () => {
  getWares(idValue.value)
    .then((res) => {
      const wares: Wares.WaresResult = res.data
      const swiper: string[] = wares.swiperImages?.split(',') || []
      swiperImages.push(...swiper)
      detail.value = wares.detail ?? ''
      name.value = wares.name
      blurbValue.value = wares.blurb
      userCollect.value = wares.collect ?? false
      browse.value = wares.browse ?? 0
      inventoryValue.value = wares.inventory
      sell.value = wares.sell ?? 0
    })
    .catch((err) => {
      console.log(err)
    })
}

const _browseWares = () => {
  browseWares(idValue.value)
    .then(() => {})
    .catch(() => {})
}

const _getRect = (name: string) => {
  return new Promise((resolve) => {
    uni
      .createSelectorQuery()
      .select(name)
      .boundingClientRect((data: any) => {
        resolve(data)
      })
      .exec()
  })
}

const onFastConfirm = () => {
  const wareIds = [idValue.value]
  uni.$tm.u.routerTo('/pages/order/confirm/index?scene=wares&wareIds=' + JSON.stringify(wareIds), 'navigate')
}

const toServices = () => {
  uni.$tm.u.routerTo('/pages/services/index', 'navigate')
}

const toCart = () => {
  uni.$tm.u.routerTo('/pages/cart/index', 'switchTab')
}

const setPageRefresh = () => {
  let pages = getCurrentPages() // 当前页
  let beforePage = pages[pages.length - 2] // 上个页面
  const channel = $instance.value?.getOpenerEventChannel()
  if (beforePage !== undefined && beforePage.route === 'pages/member/collect/index') {
    channel.emit('acceptDataFromDetail', {
      refresh: true
    })
  }
}
</script>
<style scoped>
@import './index.scss';
</style>
