<!--
 * @Author: Derek Xu
 * @Date: 2023-04-11 18:29:35
 * @LastEditors: Derek Xu
 * @LastEditTime: 2023-04-17 22:39:00
 * @FilePath: \xuct-group-purchase-uniapp\src\pages\order\list\index.nvue
 * @Description: 
 * 
 * Copyright (c) 2023 by 楚恬商行, All Rights Reserved. 
-->
<template>
  <tm-app>
    <z-paging ref="paging" v-model="orderList" @query="queryList" autoShowBackToTop loadingFullFixed autoShowSystemLoading safeAreaInsetBottom autoScrollToTopWhenReload autoCleanListWhenReload>
      <!-- 之后-vue3 -->
      <template #top>
        <view>
          <tm-navbar title="我的订单" color="#32CD32" fontColor="#fff" blur></tm-navbar>
          <tm-sheet :margin="[0, 0]" :padding="[20, 30]">
            <tm-input prefix="tmicon-search" searchLabel="搜索" placeholderStyle="fontSize: 10rpx;" focusColor="green" placeholder="订单编号"></tm-input>
          </tm-sheet>
          <tm-tabs :list="tabsTitle" @change="tabschange" :width="_width" showTabsLineAni :item-width="140" v-model:active-name="tabActiveRef" tabsLineAniColor="green" activeFontColor="green"></tm-tabs>
        </view>
      </template>
      <view v-for="(item, index) in orderList" :key="index">
        <tm-card :status="formateStatus(item.status)" :margin="[10, 10]" :title="`编号:${item.id}`" statusColor="green">
          <template v-slot:content>
            <view class="pa-10" @click="onDetailClick(item.id)">
              <view v-for="(i, ind) in item.items" :key="ind" class="flex flex-row pt-10 pb-10">
                <tm-image :width="160" :height="160" :round="4" :src="i.goodFirstDrawing"></tm-image>
                <view class="right">
                  <tm-text _class="text-overflow-2" :label="i.goodName" />
                  <view class="flex flex-row flex-row-center-between">
                    <tm-text color="orange" :label="`单位：${i.goodUnit}`" />
                    <tm-text color="grey" :label="`×${i.num}`" />
                  </view>
                </view>
              </view>
              <tm-divider />
              <view class="flex flex-row flex-row-center-between pa-10">
                <tm-text :font-size="26" color="grey" label="共计商品"></tm-text>
                <tm-text :font-size="26" color="grey" :label="`×${item.goodNum}`"></tm-text>
              </view>
            </view>
          </template>
          <template v-slot:action v-if="item.status !== 4">
            <view class="flex flex-row flex-row-center-end flex-1">
              <template v-if="item.status === 1">
                <tm-button :round="24" size="small" :margin="[24, 0]" label="付款" :font-size="24" color="green"></tm-button>
                <tm-button :round="24" size="small" label="取消订单" :font-size="24" color="orange" @click="onCancelOrder(item.id)"></tm-button>
              </template>
              <template v-else-if="item.status === 2">
                <tm-button :round="24" size="small" :margin="[24, 0]" :label="item.rush ? '已催单' : '催单'" :disabled="!!item.rush" :font-size="24" color="orange" @click="onRushOrderOrder(item.id)"></tm-button>
                <tm-button :round="24" size="small" label="申请退单" :font-size="24" color="green" @click="onRefundOrder(item.id)"></tm-button>
              </template>
              <template v-else>
                <tm-button :round="24" size="small" :margin="[24, 0]" :label="item.rush ? '已催单' : '催单'" :disabled="!!item.rush" :font-size="24" color="orange" @click="onRushOrderOrder(item.id)"></tm-button>
                <tm-button :round="24" size="small" :margin="[24, 0]" label="收货" :font-size="24" color="green" @click="onReciverOrder(item.id)"></tm-button>
              </template>
            </view>
          </template>
        </tm-card>
      </view>
    </z-paging>
  </tm-app>
</template>
<script lang="ts" setup>
import tmApp from '@/tmui/components/tm-app/tm-app.vue'
import tmNavbar from '@/tmui/components/tm-navbar/tm-navbar.vue'
import tmTabs from '@/tmui/components/tm-tabs/tm-tabs.vue'
import tmCard from '@/tmui/components/tm-card/tm-card.vue'
import tmInput from '@/tmui/components/tm-input/tm-input.vue'
import tmButton from '@/tmui/components/tm-button/tm-button.vue'
import tmSheet from '@/tmui/components/tm-sheet/tm-sheet.vue'
import tmImage from '@/tmui/components/tm-image/tm-image.vue'
import tmText from '@/tmui/components/tm-text/tm-text.vue'
import tmDivider from '@/tmui/components/tm-divider/tm-divider.vue'
import tmDrawer from '@/tmui/components/tm-drawer/tm-drawer.vue'

import { onLoad } from '@dcloudio/uni-app'
import { computed, ref } from 'vue'
import { useAppHook } from '@/store'
import { pageOrderList } from '@/api/order'
import { confirm } from '@/utils/dialog'
import { rushOrder, receiverOrder } from '@/api/order'

const tabsTitle = ref([
  { key: '0', title: '全部' },
  { key: '1', title: '待付款' },
  { key: '2', title: '待发货' },
  { key: '3', title: '待收货' },
  { key: '4', title: '已完成' }
])
const appStore = useAppHook()
const _width = computed(() => {
  return uni.$tm.u.torpx(appStore.getWindowWidth())
})
const paging = ref<any>(null)
const showWin = ref(false)
const tabActiveRef = ref<string>('0')
let orderList = ref<Order.OrderResult[]>([])

const queryList = (pageNo: number, pageSize: number) => {
  pageOrderList(pageNo, pageSize, tabActiveRef.value || '0')
    .then((res) => {
      paging.value.complete(res.data.list)
    })
    .catch((err: any) => {
      //如果请求失败写paging.value.complete(false)，会自动展示错误页面
      //注意，每次都需要在catch中写这句话很麻烦，z-paging提供了方案可以全局统一处理
      //在底层的网络请求抛出异常时，写uni.$emit('z-paging-error-emit');即可
      console.log(err)
      paging.value.complete(false)
    })
}

const tabschange = (key: string | number) => {
  paging.value.reload()
}

const formateStatus = (status: number) => {
  switch (status) {
    case 1:
      return '待付款'
    case 2:
      return '待发货'
    case 3:
      return '待收货'
    default:
      return '已完成'
  }
}

onLoad((opts: any) => {
  const { key } = opts
  if (!key) {
    return
  }
  tabActiveRef.value = key
})

const onDetailClick = (orderId: string) => {
  uni.$tm.u.routerTo('/pages/order/detail/index?orderId=' + orderId, 'navigate')
}

const onCancelOrder = (orderId: string) => {
  confirm({
    title: '确定取消吗？',
    success: () => {
      _cancelOrder(orderId)
    },
    fail: () => {}
  })
}

const onRushOrderOrder = (orderId: string) => {
  rushOrder(orderId)
    .then(() => {
      paging.value.reload()
    })
    .catch((err: any) => {
      console.log(err)
    })
}

const onReciverOrder = (orderId: string) => {
  confirm({
    title: '确认收货吗？',
    success: () => {
      _receiverOrder(orderId)
    },
    fail: () => {}
  })
}

const onRefundOrder = (orderId: string) => {
  uni.navigateTo({
    url: '/pages/order/refund/index?orderId=' + orderId,
    success: () => {
      uni.$once('order::refund::success', () => {
        paging.value.reload()
      })
    }
  })
}

const _cancelOrder = (orderId: string) => {
  // cancelOrder(orderId)
  //   .then(() => {
  //     paging.value.reload()
  //   })
  //   .catch((err: any) => {
  //     console.log(err)
  //   })
}

const _receiverOrder = (orderId: string) => {
  receiverOrder(orderId)
    .then(() => {
      paging.value.reload()
    })
    .catch((err: any) => {
      console.log(err)
    })
}
</script>
<style>
.item-image {
  width: 120rpx;
}

.right {
  display: flex;
  flex-direction: column;
  justify-content: space-between;
  flex: 1;
  height: 160rpx;
  padding: 10rpx;
}
</style>
